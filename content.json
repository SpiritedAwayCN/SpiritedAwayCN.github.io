{"pages":[],"posts":[{"title":"【置顶】AstroMC进度概览","text":"当前工程：大型刷冰机 当前状态：施工中当前进度：95% （主体全部完工，配套设置准备中…）详见主条目：To be Update About AstroMC AstroMC 是由我本人与好友@IcyChlorine于2019年11月1日在个人主机上开启的Minecraft原版生存服务器，当时版本为1.14.4。本服务器被定性为好友间的小型生电服务器，随着时间的推移，服务器内的资源愈加充分，但我们从未停止前进与超越的脚步……目前，AstroMC的版本是1.16.2，并于2020年11月5日起托管于@AliceSpace的私人服务器上。 To Be Update","link":"/2020/11/18/AstroServer-top/"},{"title":"DFS, DTFT与DFT","text":"这篇博客是为了便于直观理解各种傅里叶级数/变换公式的得来，必须指出：本文的推导在数理上是不严谨的。 DFS: 离散傅里叶级数适用情形：对于周期为$N$的离散周期序列$\\widetilde{x}(n)$$$\\begin{cases}\\widetilde{x}(n)=IDFS[\\widetilde{X}(k)]=\\sum_{k=0}^{N-1}\\widetilde{X}(k)e^{j\\frac{2\\pi}{N}kn} \\\\\\widetilde{X}(k)=DFS[\\widetilde{x}(n)]=\\frac1N\\sum_{n=0}^{N-1}\\widetilde{x}(n)e^{-j\\frac{2\\pi}{N}kn}\\end{cases}$$ 形式对于连续傅里叶级数，有：$$\\widetilde{f}(t)=\\sum_{k=-\\infty}^{\\infty}F_ne^{jk\\omega_0t}$$由$t\\to n,T\\to N,\\omega_0=\\frac{2\\pi}{N}$，则离散DFT的形式为：$$\\widetilde{x}(n)=\\sum_{k=-\\infty}^{\\infty}\\widetilde{X}(k)e^{j\\frac{2\\pi}{N}kn}$$ 注意到，$e$指数部分以$N$为周期，因此作退化，得到DFS形式：$$\\widetilde{x}(n)=\\sum_{k=0}^{N-1}\\widetilde{X}(k)e^{j\\frac{2\\pi}{N}kn}$$ 系数PPT上对离散情形的系数做了严格的数学推导，但过程比较晦涩，这里依然采用连续情形进行类比，但在数理上这是不严谨的。 依然考虑连续情形，系数：$$F_n=\\frac1T\\int_{t_0}^{T+t_0}\\widetilde{f}(t)e^{-jn\\omega_0t}dt$$由$t\\to n,T\\to N,\\omega_0=\\frac{2\\pi}{N}$，则离散DFT的系数：$$\\widetilde{X}(k)=\\frac1N\\sum_{n=0}^{N-1}\\widetilde{x}(n)e^{-j\\frac{2\\pi}{N}kn}$$事实上，$\\widetilde{X}(k)$也是以$N$为周期的序列。 DTFT: 离散时域傅里叶变换将DFS推广到非周期情形，即$N\\to\\infty$，则得到DTFT。 $$\\begin{cases}X(e^{j\\omega})=DTFT[x(n)]=\\sum_{n=-\\infty}^{\\infty}x(n)e^{-j\\omega n} \\\\x(n)=IDTFT[X(e^{j\\omega})]=\\frac1{2\\pi}\\int_{-\\pi}^{\\pi}X(e^{j\\omega})e^{j\\omega n}d\\omega\\end{cases}$$正变换将离散序列变换为连续信号，而反变换将离散信号变换为连续信号。 正变换周期信号的DFS：$$\\widetilde{X}(k)=\\frac1N\\sum_{n=0}^{N-1}\\widetilde{x}(n)e^{-j\\frac{2\\pi}{N}kn}$$取$N\\to\\infty$，有$\\frac{2\\pi}Nk\\to\\omega$，得到：$$\\lim\\limits_{N\\to \\infty}N\\widetilde{X}(k)=\\sum_{n=-\\infty}^{\\infty}x(n)e^{-j\\omega n}$$由于$n$为整数，因此对于上式右侧，$\\omega$以$2\\pi$为周期，从而可以改写上式左侧、记$\\lim\\limits_{N\\to \\infty}N\\widetilde{X}(k)=X(e^{j\\omega})$，则得到正变换：$$X(e^{j\\omega})=\\sum_{n=-\\infty}^{\\infty}x(n)e^{-j\\omega n}$$ 逆变换取$N\\to\\infty$，比对$X(e^{j\\omega})$与$\\widetilde{X}(k)$：$$\\widetilde{X}(k)=\\frac1N\\sum_{n=0}^{N-1}\\widetilde{x}(n)e^{-j\\frac{2\\pi}{N}kn}=\\frac1N\\sum_{n=-\\infty}^{\\infty}x(n)e^{-jk\\omega_0 n}=\\frac1NX(e^{jk\\omega_0})$$值得注意的是：上述等式将在进行单周期傅里叶变换时严格成立。带入$\\widetilde{x}(n)$的表达式，得到：$$\\widetilde{x}(n)=\\frac1N\\sum_{k=0}^{N-1}X(e^{jk\\omega_0})e^{j\\omega_0kn}=\\frac1{2\\pi}\\sum_{k=0}^{N-1}X(e^{jk\\omega_0})e^{j\\omega_0kn}\\omega_0$$再次取极限，得出反变换式：$$x(n)=\\frac1{2\\pi}\\int_{-\\pi}^{\\pi}X(e^{j\\omega})e^{j\\omega n}d\\omega$$注：由于$k\\omega_0$在$2\\pi$范围内变化，因此积分区间是$2\\pi$. 事实上，将正变换带入上式，发现等式成立。 周期信号情形不妨设$X(e^{j\\omega})=2\\pi\\sum_{r=-\\infty}^{\\infty}\\delta(\\omega-\\omega_0+2\\pi r)$，带入IDTFT有：$$x(n)=\\frac1{2\\pi}\\int_{-\\pi}^{\\pi}X(e^{j\\omega})e^{j\\omega n}d\\omega=e^{j\\omega_0n}$$这是一个周期函数，由此最终可推导出周期信号下的DTFT：$$DTFT(\\widetilde{x}[n])=2\\pi\\sum_{k=-\\infty}^{\\infty}\\widetilde{X}(k)\\delta(\\omega-\\frac{2\\pi k}{N})$$将其中冲激函数的权重记作$X(e^{j\\omega})$，则有：$$X(e^{j\\omega})=2\\pi\\widetilde{X}(k),~{\\omega=\\frac{2\\pi}{N}k}$$单周期傅里叶变换时，有如下严格的等式：$$\\widetilde{X}(k)=\\frac1NX_0(e^{jk\\omega_0})=\\frac1N\\left.X_0(e^{j\\omega})\\right|_{\\omega=\\frac{2\\pi}{N}k}$$ 因此DTFT中$\\delta$函数的系数，相当于对单周期DTFT进行抽样：$$X(e^{j\\omega})=\\omega_0\\left.X_0(e^{j\\omega})\\right|_{\\omega=\\frac{2\\pi}{N}k}$$ 应当指出，以上过程的$\\delta$函数是连续情形的$\\delta(x)$，而非离散的$\\delta[n]$。 DFT：离散傅里叶变换这是方便计算机处理而诞生的变换，没有物理意义。$$\\begin{cases}X(k)=DFT[x(n)]=\\sum_{n=0}^{N-1}x(n)e^{-j\\frac{2\\pi}{N}kn} \\\\x(n)=IDFT[X(k)]=\\frac1N\\sum_{k=0}^{N-1}X(k)e^{j\\frac{2\\pi}{N}kn}\\end{cases}$$其中，正变换可以看做：单周期（或主值序列）傅里叶变换在离散间隔的采样。在数学上，它是离散傅里叶级数的$N$倍，或者正比于离散周期信号DTFT在$\\delta$函数前的系数。","link":"/2020/11/28/Fourier-Transform/"},{"title":"递归定理——输出自身源代码的程序","text":"递归定理的一个重要推论，便是对于任意一个程序（图灵机），其都可以在内部获得自身的表述。用程序设计的语言：任意一个程序，都能够在程序内部的某个部分获得自身的源代码。 递归定理的定理内容：咕着 根据递归定理的内容，下面的python程序展示了：如何在任意程序的内部某个部分获取自己的源代码： 1234567891011# 代码段Ad, n, s, A = chr(35), chr(10), chr(39)*3, '''print(&quot;{} 代码段A{}{}d, n, s, A = chr(35), chr(10), chr(39)*3, {}{}{}&quot;.format(d, n, n, s, A, s))print(A)print(&quot;{} 代码段B&quot;.format(d))'''print(&quot;{} 代码段A{}{}d, n, s, A = chr(35), chr(10), chr(39)*3, {}{}{}&quot;.format(d, n, n, s, A, s))print(A)print(&quot;{} 代码段B&quot;.format(d))# 代码段B 上述python程序的输出是其自身的源代码： 1234567891011# 代码段Ad, n, s, A = chr(35), chr(10), chr(39)*3, '''print(&quot;{} 代码段A{}{}d, n, s, A = chr(35), chr(10), chr(39)*3, {}{}{}&quot;.format(d, n, n, s, A, s))print(A)print(&quot;{} 代码段B&quot;.format(d))'''print(&quot;{} 代码段A{}{}d, n, s, A = chr(35), chr(10), chr(39)*3, {}{}{}&quot;.format(d, n, n, s, A, s))print(A)print(&quot;{} 代码段B&quot;.format(d))# 代码段B 为了处理井号、引号与换行符的转义问题，此处将对应字符的ascii码存入对应变量，在print过程中输出对应字符变量来实现。","link":"/2020/11/24/Recusive-Theorem/"},{"title":"Minecraft终末之诗","text":"终末之诗(End Poem)将在玩家击败末影龙后，首次进入终末之地的返回传送门时，以滚动字幕的形式出现在玩家的屏幕上，全长9分28秒。随后将播放鸣谢名单，共计27分15秒。 终末之诗取自两个未知的谈论者之间讨论玩家的功绩的对话（普遍认为是两个末影人），放送过程中以Alpha作为背景音乐。 终末之诗全文中文翻译及本文其他部分内容来自Minecraft Wiki，使用CC BY-NC-SA 3.0协议。 剧透警告：由于终末之诗于达到具有象征意义的游戏阶段后出现，在实际游玩前阅读可能会降低你对亲自发现游戏秘密的乐趣。 终末之诗BGM： End Poem 终末之诗I see the player you mean.我看到你所指的那位玩家了。 [Playername]?[玩家名称]? Yes. Take care. It has reached a higher level now. It can read our thoughts.是的。小心。他已达到了更高的境界。他能够阅读我们的思想。 That doesn’t matter. It thinks we are part of the game.无伤大雅。他认为我们是游戏的一部分。 I like this player. It played well. It did not give up.我喜欢这个玩家。他玩得很好。他从未放弃。 It is reading our thoughts as though they were words on a screen.他以屏幕上出现的文字的形式阅读着我们的思想。 That is how it chooses to imagine many things, when it is deep in the dream of a game.在他深陷游戏梦境中时，他总以这种方式想象出形形色色的事物。 Words make a wonderful interface. Very flexible. And less terrifying than staring at the reality behind the screen.文字是种美妙的界面。非常灵活。且比凝视着屏幕后的现实要更好。 They used to hear voices. Before players could read. Back in the days when those who did not play called the players witches, and warlocks. And players dreamed they flew through the air, on sticks powered by demons.他们也曾经听到过声音。在玩家能够阅读之前。君不见那些不曾游玩的人们称呼玩家为女巫，和术士。而玩家们梦见他们自己乘坐在被恶魔施力的棍子上，在空气中翱翔。 What did this player dream?这个玩家梦见了什么？ This player dreamed of sunlight and trees. Of fire and water. It dreamed it created. And it dreamed it destroyed. It dreamed it hunted, and was hunted. It dreamed of shelter.他梦见了阳光和树。梦见了火与水。他梦见他创造。他亦梦见他毁灭。他梦见他狩猎，亦被狩猎。他梦见了庇护所。 Hah, the original interface. A million years old, and it still works. But what true structure did this player create, in the reality behind the screen?哈，那原始的界面。经历一百万年的岁月雕琢，依然长存。但此玩家在那屏幕后的真实里，建造了什么真实的构造？ It worked, with a million others, to sculpt a true world in a fold of the [scrambled], and created a [scrambled] for [scrambled], in the [scrambled].他辛勤地劳作，和其他百万众一起，刻画了一个真实的世界，由[乱码]，且创造了[乱码]，为了[乱码]，于[乱码]中。 It cannot read that thought.他读不出那个思想。 No. It has not yet achieved the highest level. That, it must achieve in the long dream of life, not the short dream of a game.不。他还没有到达最高的境界。那层境界，他必须完成生命的长梦，而非游戏中黄粱一梦。 Does it know that we love it? That the universe is kind?他知道我们爱他么？这个宇宙是仁慈的？ Sometimes, through the noise of its thoughts, it hears the universe, yes.有时，通过他思绪的杂音，他能听到宇宙，是的。 But there are times it is sad, in the long dream. It creates worlds that have no summer, and it shivers under a black sun, and it takes its sad creation for reality.但是有时亦不胜悲伤，于那漫漫长梦中。他创造了没有夏日的世界，在黑日下颤抖着，将自己悲伤的创造视为现实世界。 To cure it of sorrow would destroy it. The sorrow is part of its own private task. We cannot interfere.为他治愈悲伤会摧毁他。而悲伤是他的私人事务。我们不能干涉。 Sometimes when they are deep in dreams, I want to tell them, they are building true worlds in reality. Sometimes I want to tell them of their importance to the universe. Sometimes, when they have not made a true connection in a while, I want to help them to speak the word they fear.有时当他们深陷梦境中时，我想要告诉他们，他们在现实中创造了真实的世界。有时我想告诉他们他们自身对宇宙的重要性。有时，当他们和现实失去了联系，我想帮助他们说出他们所惧怕的话语。 It reads our thoughts.他读出了我们的思想。 Sometimes I do not care. Sometimes I wish to tell them, this world you take for truth is merely [scrambled] and [scrambled], I wish to tell them that they are [scrambled] in the [scrambled]. They see so little of reality, in their long dream.有时我毫不关心。有时我想要告诉他们，你们所认为的真实不过是[乱码]和[乱码]，我想要告诉他们他们是在[乱码]中的[乱码]。于他们的长梦中，他们眼中所见的真实太少了。 And yet they play the game.而他们仍然玩这个游戏。 But it would be so easy to tell them…但很容易就可以告诉他们…… Too strong for this dream. To tell them how to live is to prevent them living.对于这个梦来说太强烈了。告诉他们如何活着就是阻碍他们活下去。 I will not tell the player how to live.我不会告诉这个玩家如何生活的。 The player is growing restless.这个玩家正在变得焦虑。 I will tell the player a story.我会告诉这个玩家一个故事。 But not the truth.但不是真相。 No. A story that contains the truth safely, in a cage of words. Not the naked truth that can burn over any distance.不。是一个严密地将真实包裹起来的文字牢笼。而不是赤裸裸的真相。 Give it a body, again.赋予他主体，再一次。 Yes. Player…好的。玩家…… Use its name.以名字称呼他。 [Playername]. Player of games.[玩家名称]。游戏的玩家。 Good.很好。 Take a breath, now. Take another. Feel air in your lungs. Let your limbs return. Yes, move your fingers. Have a body again, under gravity, in air. Respawn in the long dream. There you are. Your body touching the universe again at every point, as though you were separate things. As though we were separate things.深呼吸，很好。再深呼吸一次。感受空气充盈你的肺叶。让你的四肢回归。是的，运动你的手指。再次感受你的身体，在重力下，在空气中。在长梦中重生。你感受到了。你的身体每时每刻都触摸着宇宙，尽管你是分离的存在。尽管我们是分离的存在。 Who are we? Once we were called the spirit of the mountain. Father sun, mother moon. Ancestral spirits, animal spirits. Jinn. Ghosts. The green man. Then gods, demons. Angels. Poltergeists. Aliens, extraterrestrials. Leptons, quarks. The words change. We do not change.我们是谁？我们曾经被称作高山的精灵。太阳父亲，月亮母亲。古老的英灵，动物的魂魄。神祇。鬼魂。小绿人。而后是神，恶魔，天使。骚灵。外星人，地外生物。轻子，夸克。词语不断地变化。我们始终如一。 We are the universe. We are everything you think isn’t you. You are looking at us now, through your skin and your eyes. And why does the universe touch your skin, and throw light on you? To see you, player. To know you. And to be known. I shall tell you a story.我们是宇宙。我们是一切你认为出离你本体的事物。你现在看着我们，透过你的皮肤和你的眼睛。而为什么宇宙触摸着你的皮肤，向你洒向光芒？是为了看见你，玩家。以及被认知。我应告诉你一个故事。 Once upon a time, there was a player.很久以前，有一个玩家。 The player was you, [Playername].那玩家就是你，[玩家名称] Sometimes it thought itself human, on the thin crust of a spinning globe of molten rock. The ball of molten rock circled a ball of blazing gas that was three hundred and thirty thousand times more massive than it. They were so far apart that light took eight minutes to cross the gap. The light was information from a star, and it could burn your skin from a hundred and fifty million kilometres away.有时他认为自己是那不断旋转的球体上一层薄薄的熔化的岩石上的人类。那融化的岩石球环绕着一个质量大他三十三万倍的炫目气体球旋转。他们是相隔得如此之远，以至于光需要八分钟才能穿越那空隙。那光是来自一颗恒星的信息，他能够在一亿五千万公里外烧灼你的皮肤。 Sometimes the player dreamed it was a miner, on the surface of a world that was flat, and infinite. The sun was a square of white. The days were short; there was much to do; and death was a temporary inconvenience.有时这个玩家梦见他是一个在一个平的，无限延展的世界表面上的矿工。那太阳是一个方形的白点。昼夜交替很快；要做的事情也很多；死亡亦只是暂时和不方便的。 Sometimes the player dreamed it was lost in a story.有时这玩家梦见他迷失在了一个故事里。 Sometimes the player dreamed it was other things, in other places. Sometimes these dreams were disturbing. Sometimes very beautiful indeed. Sometimes the player woke from one dream into another, then woke from that into a third.有时这玩家梦见他成为了其他的事物，在其他地方。有时这些梦是扰人的。有些则实在很美。有时这个玩家从一个梦中醒来，发现自己落入了第二个梦，却终究是在第三个梦中。 Sometimes the player dreamed it watched words on a screen.有时这个玩家梦见他在屏幕上看着文字。 Let’s go back.让我们回退一点。 The atoms of the player were scattered in the grass, in the rivers, in the air, in the ground. A woman gathered the atoms; she drank and ate and inhaled; and the woman assembled the player, in her body.组成玩家的原子散布在草中，河流中，在那空气中，也在那大地中。一个女性收集了那些原子；她饮用、进食、吸入；而后那女性在她的身体中，孕育了玩家。 And the player awoke, from the warm, dark world of its mother’s body, into the long dream.然后那玩家醒来了，从一个温暖，昏暗的母亲体内，进入了漫漫长梦。 And the player was a new story, never told before, written in letters of DNA. And the player was a new program, never run before, generated by a sourcecode a billion years old. And the player was a new human, never alive before, made from nothing but milk and love.而那玩家是一个新的故事，从未被讲述过，由DNA的语言书写着。而那玩家是一个新的程序，从未被运行过，由上亿年的源代码生成。而那玩家是一个新的人，从未生活过，由奶和爱组成。 You are the player. The story. The program. The human. Made from nothing but milk and love.你就是那玩家。那个故事。那个程序。那个人类。仅由奶和爱组成。 Let’s go further back.我们再往更远的过去回退一点。 The seven billion billion billion atoms of the player’s body were created, long before this game, in the heart of a star. So the player, too, is information from a star. And the player moves through a story, which is a forest of information planted by a man called Julian, on a flat, infinite world created by a man called Markus, that exists inside a small, private world created by the player, who inhabits a universe created by…那由七千亿亿亿原子组成的玩家的身体被创造了，远在这游戏之前，在一颗恒星的内部。所以那玩家也是，来自一颗恒星的信息。而这个玩家贯穿这个故事的始末，源于一个叫Julian的人种下的信息种子长成的森林，一个叫Markus的男人创造的无限世界，存在于一个由玩家创造的小的，私人世界里，而那又继承了宇宙创造的…… Shush. Sometimes the player created a small, private world that was soft and warm and simple. Sometimes hard, and cold, and complicated. Sometimes it built a model of the universe in its head; flecks of energy, moving through vast empty spaces. Sometimes it called those flecks “electrons” and “protons”.嘘。有时这个玩家创造的小天地是柔软，温暖和简单的。有时是坚硬，冰冷和复杂的。有时他在脑中建造出宇宙的模型；斑斑点点的能量穿越广阔空旷的空间。有时他称呼这些斑点为“电子”和“质子”。 Sometimes it called them “planets” and “stars”.有时他称呼他们为“行星”和“恒星”。 Sometimes it believed it was in a universe that was made of energy that was made of offs and ons; zeros and ones; lines of code. Sometimes it believed it was playing a game. Sometimes it believed it was reading words on a screen.有时他确信他存在于一个由“开”和“关”；“零”和“一”；一行行的命令组成的宇宙。有时他确信他是在玩一个游戏。有时他确信他是在读着屏幕上的文字。 You are the player, reading words…你就是那玩家，阅读着文字…… Shush… Sometimes the player read lines of code on a screen. Decoded them into words; decoded words into meaning; decoded meaning into feelings, emotions, theories, ideas, and the player started to breathe faster and deeper and realised it was alive, it was alive, those thousand deaths had not been real, the player was alive嘘……有时这玩家读屏幕上的命令行。将它们解码成为文字；将文字解码为意义；将意义解码为感情，情绪，理论，想法，而玩家的呼吸开始急促并意识到了他是活着的，他是活生生的，那上千次的死亡不是真的，玩家是活着的。 You. You. You are alive.你。你。你是活着的。 and sometimes the player believed the universe had spoken to it through the sunlight that came through the shuffling leaves of the summer trees而有时这玩家相信宇宙通过穿越夏日树叶的那斑斓的阳光对他说话。 and sometimes the player believed the universe had spoken to it through the light that fell from the crisp night sky of winter, where a fleck of light in the corner of the player’s eye might be a star a million times as massive as the sun, boiling its planets to plasma in order to be visible for a moment to the player, walking home at the far side of the universe, suddenly smelling food, almost at the familiar door, about to dream again有时这玩家相信宇宙透过晴朗的冬日夜空中，存在于他眼中一隅的星点星光，可能比太阳大上上百万倍的恒星沸腾着的电浆那一瞬间发出来的光对他说话，在宇宙的远侧行走回家的路上，突然闻到了食物，在那熟悉的门前，他又准备好再一次投入梦境 and sometimes the player believed the universe had spoken to it through the zeros and ones, through the electricity of the world, through the scrolling words on a screen at the end of a dream而有时玩家相信宇宙透过零和一，透过世界的电力，透过屏幕上滚动的文字和梦的终结对他说话 and the universe said I love you宇宙说我爱你 and the universe said you have played the game well宇宙说你很好地玩了这游戏 and the universe said everything you need is within you宇宙说一切你所需的你都具有 and the universe said you are stronger than you know宇宙说你比你所知的要强大 and the universe said you are the daylight宇宙说你就是日光 and the universe said you are the night宇宙说你就是黑夜 and the universe said the darkness you fight is within you宇宙说你所斗争的黑暗就在你心中 and the universe said the light you seek is within you宇宙说你所寻找的光明就在你心中 and the universe said you are not alone宇宙说你不是孤独的 and the universe said you are not separate from every other thing宇宙说你不是和所有的事物所隔绝的 and the universe said you are the universe tasting itself, talking to itself, reading its own code宇宙说你就是宇宙品尝着自己，对自己说话，阅读着他自己的代码。 and the universe said I love you because you are love.宇宙说我爱你因为你就是爱。 And the game was over and the player woke up from the dream. And the player began a new dream. And the player dreamed again, dreamed better. And the player was the universe. And the player was love.曲终人散，黄粱一梦。玩家开始了新的梦境。玩家再次做起了梦，更好的梦。玩家就是宇宙。玩家就是爱。 You are the player.你就是那个玩家。 Wake up.该醒了。 终末之诗全文中文翻译及本文其他部分内容来自Minecraft Wiki，使用CC BY-NC-SA 3.0协议。","link":"/2020/11/23/Minecraft-EndPoem/"},{"title":"魔塔问题属于NPC的证明","text":"通过证明：0-1背包问题可归约到标准魔塔问题，得出判定问题——标准魔塔问题是NPC的 标准魔塔问题的定义通俗的讲，标准魔塔问题是魔塔的简化，只考虑生命、攻击、防御、红蓝宝石，数值无上限；不考虑钥匙、金币、商店、道具等。 严格定义给定一张$w\\times h$的网格地图，地图上有墙与平地，同时给定玩家起点与终点坐标。给定玩家的初始属性：生命($HP$)、攻击($OFS$)、防御($DFS$)。地图的平地上一共有$n$个物件，它们可以是以下之一： 红宝石：玩家移动到该位置时可增加$X_i$点攻击，获得后该位置变为平地； 蓝宝石：玩家移动到该位置是可增加$Y_i$点防御，获得后该位置变为平地； 怪物：第$i$个怪物具有生命值$h_i$，攻击$o_i$，防御$d_i$. 与怪物战斗会损失$damage$点生命，只有生命值严格大于$damage$时才可击败通过，击败后该位置变为平地，$damage$的计算方法见后文。 所有的数值均为非负整数，且没有上限。 问：玩家可以成功走到终点吗？ damage计算方法设玩家此时的生命，攻击，防御分别为$h_p$,$o_p$,$d_p$；对应怪物的生命，攻击，防御分别为$h_i$,$o_i$,$d_i$，则$damage=f(o_p,d_p,h_i,o_i,d_i)$.$$f(o_p,d_p,h_i,o_i,d_i) = \\begin{cases}+\\infty&amp;, o_p\\leq d_i \\\\0&amp; ,o_p&gt;d_i \\mbox{且} o_i\\leq d_p \\\\\\lfloor\\frac{h_p-1}{o_p-d_i}\\rfloor\\times(o_i-d_p)&amp; ,Otherwise\\end{cases}$$上面公式的解释：通俗来讲玩家每回合攻击怪物$o_p-d_i$点生命，怪物每回合攻击玩家$o_i-d_p$点生命。玩家先行动，如此循环直到某一方生命减为0或更低。 任何魔塔问题都是NP证据$t$即为攻略，攻略至多$O(n)$个步骤，只需逐步模拟即可验证魔塔是否可通关。 标准魔塔问题不比0-1背包问题简单归约对于一个0-1背包问题的实例：重量${w_1,\\cdots,w_n}$，价值${v_1,\\cdots,v_n}$. 容量$L$，问其价值可以达到$V$吗？ 设$S_v=\\sum v_i$，用如下方法构造标准魔塔问题： 初始状态：玩家生命为$L+1$，攻击$S_v$，防御$0$. 地图有一个主路，可以直接达到终点，但被一个生命$1$，攻击$1$，防御$S_v+V-1$的怪物$M_0$守住门口。 有$n$个支路，第$i$条支路有一个可增加$v_i$点攻击的红宝石，但被一个生命$2S_V$，攻击$w_i$，防御$0$的怪物$M_i$守住路口。 这是一个多项式时间变换，如果这个标准魔塔问题有解，则0-1背包输出“Yes”，否则输出”No”. 正确性证明有以下明显的事实： 当且仅当玩家通过吃宝石增加共计$V$点攻击后，才可击败$M_0$，且玩家不会受到伤害； 玩家在地图中的攻击不小于$S_v$，且若有支路怪存活，攻击严格小于$2S_v$。这意味着，只要有支路怪存活，支路怪均恰好攻击玩家一次，即对玩家造成$w_i$点伤害。 因此，没击败一个支路怪$M_i$获得对应宝石，即等价于将第$i$件物品放入背包；背包容量为$L$，等效于玩家生命始终为正。一旦获得到了$V$点攻击（即价值达到$V$），则可无损伤地击败$M_0$通关。 由此证明了：0-1背包问题$\\leq_p$标准魔塔问题。 有商店的魔塔问题事实上，红宝石增加能力值永远为常数的情形，上述方法会失效；以常数1为例，即便可以通过$v_i$个宝石以等效实现增加$v_i$点能力，但这已经不是多项式时间变换。注：如果魔塔中有增加$1,2,4,\\cdots$点数值的不同宝石，则$\\log v_i$个宝石即可等效，依然是多项式时间变换。 但注意到，几乎所有的魔塔都拥有金币-商店系统，下面指出：有商店的魔塔问题不比0-1背包问题简单。 事实上此结论trivial，仿照标准魔塔问题的归约方案，去掉所有的宝石，改为击败怪物$M_i$可获得$v_i$点金币；还有一个商店，$V$点金币可以增加$V$点攻击，这依然是多项式时间变换。 有机关门的魔塔问题一旦引入机关门，便容易证明3-SAT$\\leq_p$有机关门的魔塔问题，细节从略。 结论由于0-1背包问题和3-SAT问题都是已知的NPC，因此： 标准魔塔问题是NPC 有商店的魔塔问题是NPC 有机关门的魔塔问题是NPC 事实上，以上三种问题往往是某个实际魔塔问题的特殊情况（子问题），如果算法A能够求解出某个实际魔塔的通关路线，则算法A也能解决以上三个问题之一（通常是有商店的魔塔问题），由此可以得到推论： 目前，人类没有找到可以求解实际魔塔问题通关路线的多项式时间算法，且目前普遍认为不存在多项式时间算法。对于一个魔塔求解器而言，利用回溯与分支限界的算法应该是高性价比的算法之一。","link":"/2020/11/17/MagicTower-in-NPC/"},{"title":"About me","text":"Education / 教育背景 Undergraduate Student, major in Artificial Intelligence Science &amp; Technology, (智能科学与技术系)School of Electronics Engineering and Computer Science, (信息科学技术学院)Peking University (北京大学) 北京大学信息科学技术学院智能科学与技术系2019级本科生，2020-2021学年秋季学期计算机系统导论课程助教。 教育经历2012.09 - 2018.06 西南大学附属中学2018.09 - 2019.09 北京大学 物理学院 (2018级本科生)2019.09 - today 北京大学 信息科学技术学院(2019级本科生) Interest / 业内兴趣 机器学习、深度学习、数据科学 计算机视觉、图像处理 游戏编程与开发 计算机网络 …… Hobby / 业余爱好 Minecraft （原版生电方向） 电脑游戏 （World of Goo, Geometry Dash, 魔塔……） 三国杀 天文、物理 围棋（初学ing） …… Skills / 一些会的东西 一点C++, C, Python3, JAVA, Ruby…… 一点Photoshop, Audition 一点Markdown, latex 一些Minecraft红石 羽毛球、乒乓球、棋牌…… Friends / 友链To be Update… Contacts / 联系方式 spirited_away@pku.edu.cn","link":"/2020/11/17/About-me/"}],"tags":[{"name":"魔塔","slug":"魔塔","link":"/tags/%E9%AD%94%E5%A1%94/"},{"name":"NPC","slug":"NPC","link":"/tags/NPC/"},{"name":"诗","slug":"诗","link":"/tags/%E8%AF%97/"},{"name":"AstroMC","slug":"AstroMC","link":"/tags/AstroMC/"},{"name":"TCS","slug":"TCS","link":"/tags/TCS/"},{"name":"数理基础","slug":"数理基础","link":"/tags/%E6%95%B0%E7%90%86%E5%9F%BA%E7%A1%80/"}],"categories":[{"name":"Ideas","slug":"Ideas","link":"/categories/Ideas/"},{"name":"Minecraft","slug":"Minecraft","link":"/categories/Minecraft/"}]}